{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\T-Gamer\\\\Documents\\\\GitHub\\\\pmoveldoacaosangue\\\\Screen\\\\LoginScreen.js\";\n\nimport React, { useState, createRef } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport AsyncStorage from '@react-native-community/async-storage';\nimport Loader from \"./Components/Loader\";\n\nvar LoginScreen = function LoginScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      userEmail = _useState2[0],\n      setUserEmail = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userPassword = _useState4[0],\n      setUserPassword = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      errortext = _useState8[0],\n      setErrortext = _useState8[1];\n\n  var passwordInputRef = createRef();\n\n  var handleSubmitPress = function handleSubmitPress() {\n    setErrortext('');\n\n    if (!userEmail) {\n      alert('Por favor coloque seu email.');\n      return;\n    }\n\n    if (!userPassword) {\n      alert('Por favor coloque sua senha.');\n      return;\n    }\n\n    setLoading(true);\n    var dataToSend = {\n      user_email: userEmail,\n      user_password: userPassword\n    };\n    var formBody = [];\n\n    for (var key in dataToSend) {\n      var encodedKey = encodeURIComponent(key);\n      var encodedValue = encodeURIComponent(dataToSend[key]);\n      formBody.push(encodedKey + '=' + encodedValue);\n    }\n\n    formBody = formBody.join('&');\n    fetch('https://aboutreact.herokuapp.com/login.php', {\n      method: 'POST',\n      body: formBody,\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (responseJson) {\n      setLoading(false);\n      console.log(responseJson);\n\n      if (responseJson.status == 1) {\n        AsyncStorage.setItem('user_id', responseJson.data[0].user_id);\n        console.log(responseJson.data[0].user_id);\n        navigation.replace('DrawerNavigationRoutes');\n      } else {\n        setErrortext('Please check your email id or password');\n        console.log('Please check your email id or password');\n      }\n    }).catch(function (error) {\n      setLoading(false);\n      console.error(error);\n    });\n  };\n\n  return React.createElement(View, {\n    style: styles.mainBody,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, React.createElement(Loader, {\n    loading: loading,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }), React.createElement(ScrollView, {\n    keyboardShouldPersistTaps: \"handled\",\n    contentContainerStyle: {\n      flex: 1,\n      justifyContent: 'center',\n      alignContent: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, React.createElement(KeyboardAvoidingView, {\n    enabled: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, React.createElement(View, {\n    style: {\n      alignItems: 'center'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, React.createElement(Image, {\n    source: require(\"../Image/aboutreact.png\"),\n    style: {\n      width: '50%',\n      height: 100,\n      resizeMode: 'contain',\n      margin: 30\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 15\n    }\n  })), React.createElement(View, {\n    style: styles.SectionStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, React.createElement(TextInput, {\n    style: styles.inputStyle,\n    onChangeText: function onChangeText(UserEmail) {\n      return setUserEmail(UserEmail);\n    },\n    placeholder: \"Insira o email\",\n    placeholderTextColor: \"#D4F1F4\",\n    autoCapitalize: \"none\",\n    keyboardType: \"email-address\",\n    returnKeyType: \"next\",\n    onSubmitEditing: function onSubmitEditing() {\n      return passwordInputRef.current && passwordInputRef.current.focus();\n    },\n    underlineColorAndroid: \"#f000\",\n    blurOnSubmit: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 15\n    }\n  })), React.createElement(View, {\n    style: styles.SectionStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, React.createElement(TextInput, {\n    style: styles.inputStyle,\n    onChangeText: function onChangeText(UserPassword) {\n      return setUserPassword(UserPassword);\n    },\n    placeholder: \"Insira a senha\",\n    placeholderTextColor: \"#D4F1F4\",\n    keyboardType: \"default\",\n    ref: passwordInputRef,\n    onSubmitEditing: Keyboard.dismiss,\n    blurOnSubmit: false,\n    secureTextEntry: true,\n    underlineColorAndroid: \"#f000\",\n    returnKeyType: \"next\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 15\n    }\n  })), errortext != '' ? React.createElement(Text, {\n    style: styles.errorTextStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 15\n    }\n  }, \" \", errortext, \" \") : null, React.createElement(TouchableOpacity, {\n    style: styles.buttonStyle,\n    activeOpacity: 0.5,\n    onPress: handleSubmitPress,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonTextStyle,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 15\n    }\n  }, \"LOGIN\")), React.createElement(Text, {\n    style: styles.registerTextStyle,\n    onPress: function onPress() {\n      return navigation.navigate('RegisterScreen');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, \"Novo aqui? Registre-se!\"), React.createElement(Text, {\n    style: styles.registerTextStyle,\n    onPress: function onPress() {\n      return navigation.navigate('RegisterScreen');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }, \"Esqueci minha senha\")))));\n};\n\nexport default LoginScreen;\nvar styles = StyleSheet.create({\n  mainBody: {\n    flex: 1,\n    justifyContent: 'center',\n    backgroundColor: '#FF5554',\n    alignContent: 'center'\n  },\n  SectionStyle: {\n    flexDirection: 'row',\n    height: 40,\n    marginTop: 20,\n    marginLeft: 35,\n    marginRight: 35,\n    margin: 10\n  },\n  buttonStyle: {\n    backgroundColor: '#0000DC',\n    borderWidth: 0,\n    color: '#FFFFFF',\n    borderColor: '#0000DC',\n    height: 40,\n    alignItems: 'center',\n    borderRadius: 30,\n    marginLeft: 35,\n    marginRight: 35,\n    marginTop: 20,\n    marginBottom: 25\n  },\n  buttonTextStyle: {\n    color: '#FFFFFF',\n    paddingVertical: 10,\n    fontSize: 16\n  },\n  inputStyle: {\n    flex: 1,\n    color: 'white',\n    paddingLeft: 15,\n    paddingRight: 15,\n    borderWidth: 1,\n    borderRadius: 30,\n    borderColor: '#dadae8'\n  },\n  registerTextStyle: {\n    color: '#FFFFFF',\n    textAlign: 'center',\n    fontWeight: 'bold',\n    fontSize: 14,\n    alignSelf: 'center',\n    padding: 10\n  },\n  errorTextStyle: {\n    color: 'red',\n    textAlign: 'center',\n    fontSize: 14\n  }\n});","map":{"version":3,"sources":["C:/Users/T-Gamer/Documents/GitHub/pmoveldoacaosangue/Screen/LoginScreen.js"],"names":["React","useState","createRef","AsyncStorage","Loader","LoginScreen","navigation","userEmail","setUserEmail","userPassword","setUserPassword","loading","setLoading","errortext","setErrortext","passwordInputRef","handleSubmitPress","alert","dataToSend","user_email","user_password","formBody","key","encodedKey","encodeURIComponent","encodedValue","push","join","fetch","method","body","headers","then","response","json","responseJson","console","log","status","setItem","data","user_id","replace","catch","error","styles","mainBody","flex","justifyContent","alignContent","alignItems","require","width","height","resizeMode","margin","SectionStyle","inputStyle","UserEmail","current","focus","UserPassword","Keyboard","dismiss","errorTextStyle","buttonStyle","buttonTextStyle","registerTextStyle","navigate","StyleSheet","create","backgroundColor","flexDirection","marginTop","marginLeft","marginRight","borderWidth","color","borderColor","borderRadius","marginBottom","paddingVertical","fontSize","paddingLeft","paddingRight","textAlign","fontWeight","alignSelf","padding"],"mappings":"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","sourcesContent":["// Import React and Component\r\nimport React, { useState, createRef } from 'react';\r\nimport {\r\n  StyleSheet,\r\n  TextInput,\r\n  View,\r\n  Text,\r\n  ScrollView,\r\n  Image,\r\n  Keyboard,\r\n  TouchableOpacity,\r\n  KeyboardAvoidingView,\r\n} from 'react-native';\r\n\r\nimport AsyncStorage from '@react-native-community/async-storage';\r\n\r\nimport Loader from './Components/Loader';\r\n\r\nconst LoginScreen = ({ navigation }) => {\r\n  const [userEmail, setUserEmail] = useState('');\r\n  const [userPassword, setUserPassword] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [errortext, setErrortext] = useState('');\r\n\r\n  const passwordInputRef = createRef();\r\n\r\n  const handleSubmitPress = () => {\r\n    setErrortext('');\r\n    if (!userEmail) {\r\n      alert('Por favor coloque seu email.');\r\n      return;\r\n    }\r\n    if (!userPassword) {\r\n      alert('Por favor coloque sua senha.');\r\n      return;\r\n    }\r\n    setLoading(true);\r\n    let dataToSend = { user_email: userEmail, user_password: userPassword };\r\n    let formBody = [];\r\n    for (let key in dataToSend) {\r\n      let encodedKey = encodeURIComponent(key);\r\n      let encodedValue = encodeURIComponent(dataToSend[key]);\r\n      formBody.push(encodedKey + '=' + encodedValue);\r\n    }\r\n    formBody = formBody.join('&');\r\n\r\n    fetch('https://aboutreact.herokuapp.com/login.php', {\r\n      method: 'POST',\r\n      body: formBody,\r\n      headers: {\r\n        //Header Defination\r\n        'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((responseJson) => {\r\n        //Hide Loader\r\n        setLoading(false);\r\n        console.log(responseJson);\r\n        // If server response message same as Data Matched\r\n        if (responseJson.status == 1) {\r\n          AsyncStorage.setItem('user_id', responseJson.data[0].user_id);\r\n          console.log(responseJson.data[0].user_id);\r\n          navigation.replace('DrawerNavigationRoutes');\r\n        } else {\r\n          setErrortext('Please check your email id or password');\r\n          console.log('Please check your email id or password');\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        //Hide Loader\r\n        setLoading(false);\r\n        console.error(error);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <View style={styles.mainBody}>\r\n      <Loader loading={loading} />\r\n      <ScrollView\r\n        keyboardShouldPersistTaps=\"handled\"\r\n        contentContainerStyle={{\r\n          flex: 1,\r\n          justifyContent: 'center',\r\n          alignContent: 'center',\r\n        }}>\r\n        <View>\r\n          <KeyboardAvoidingView enabled>\r\n            <View style={{ alignItems: 'center' }}>\r\n              <Image\r\n                source={require('../Image/aboutreact.png')}\r\n                style={{\r\n                  width: '50%',\r\n                  height: 100,\r\n                  resizeMode: 'contain',\r\n                  margin: 30,\r\n                }}\r\n              />\r\n            </View>\r\n            <View style={styles.SectionStyle}>\r\n              <TextInput\r\n                style={styles.inputStyle}\r\n                onChangeText={(UserEmail) => setUserEmail(UserEmail)}\r\n                placeholder=\"Insira o email\" //dummy@abc.com\r\n                placeholderTextColor=\"#D4F1F4\"\r\n                autoCapitalize=\"none\"\r\n                keyboardType=\"email-address\"\r\n                returnKeyType=\"next\"\r\n                onSubmitEditing={() =>\r\n                  passwordInputRef.current && passwordInputRef.current.focus()\r\n                }\r\n                underlineColorAndroid=\"#f000\"\r\n                blurOnSubmit={false}\r\n              />\r\n            </View>\r\n            <View style={styles.SectionStyle}>\r\n              <TextInput\r\n                style={styles.inputStyle}\r\n                onChangeText={(UserPassword) => setUserPassword(UserPassword)}\r\n                placeholder=\"Insira a senha\" //12345\r\n                placeholderTextColor=\"#D4F1F4\"\r\n                keyboardType=\"default\"\r\n                ref={passwordInputRef}\r\n                onSubmitEditing={Keyboard.dismiss}\r\n                blurOnSubmit={false}\r\n                secureTextEntry={true}\r\n                underlineColorAndroid=\"#f000\"\r\n                returnKeyType=\"next\"\r\n              />\r\n            </View>\r\n            {errortext != '' ? (\r\n              <Text style={styles.errorTextStyle}> {errortext} </Text>\r\n            ) : null}\r\n            <TouchableOpacity\r\n              style={styles.buttonStyle}\r\n              activeOpacity={0.5}\r\n              onPress={handleSubmitPress}>\r\n              <Text style={styles.buttonTextStyle}>LOGIN</Text>\r\n            </TouchableOpacity>\r\n            <Text\r\n              style={styles.registerTextStyle}\r\n              onPress={() => navigation.navigate('RegisterScreen')}>\r\n              Novo aqui? Registre-se!\r\n            </Text>\r\n            <Text\r\n              style={styles.registerTextStyle}\r\n              onPress={() => navigation.navigate('RegisterScreen')}>\r\n              Esqueci minha senha\r\n            </Text>\r\n          </KeyboardAvoidingView>\r\n        </View>\r\n      </ScrollView>\r\n    </View>\r\n  );\r\n};\r\nexport default LoginScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n  mainBody: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    backgroundColor: '#FF5554',\r\n    alignContent: 'center',\r\n  },\r\n  SectionStyle: {\r\n    flexDirection: 'row',\r\n    height: 40,\r\n    marginTop: 20,\r\n    marginLeft: 35,\r\n    marginRight: 35,\r\n    margin: 10,\r\n  },\r\n  buttonStyle: {\r\n    backgroundColor: '#0000DC',\r\n    borderWidth: 0,\r\n    color: '#FFFFFF',\r\n    borderColor: '#0000DC',\r\n    height: 40,\r\n    alignItems: 'center',\r\n    borderRadius: 30,\r\n    marginLeft: 35,\r\n    marginRight: 35,\r\n    marginTop: 20,\r\n    marginBottom: 25,\r\n  },\r\n  buttonTextStyle: {\r\n    color: '#FFFFFF',\r\n    paddingVertical: 10,\r\n    fontSize: 16,\r\n  },\r\n  inputStyle: {\r\n    flex: 1,\r\n    color: 'white',\r\n    paddingLeft: 15,\r\n    paddingRight: 15,\r\n    borderWidth: 1,\r\n    borderRadius: 30,\r\n    borderColor: '#dadae8',\r\n  },\r\n  registerTextStyle: {\r\n    color: '#FFFFFF',\r\n    textAlign: 'center',\r\n    fontWeight: 'bold',\r\n    fontSize: 14,\r\n    alignSelf: 'center',\r\n    padding: 10,\r\n  },\r\n  errorTextStyle: {\r\n    color: 'red',\r\n    textAlign: 'center',\r\n    fontSize: 14,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}